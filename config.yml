from telethon import TelegramClient, events, sync
from telethon.tl.types import InputChannel
import yaml
import sys
import logging
import pdb

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logging.getLogger('telethon').setLevel(level=logging.WARNING)
logger = logging.getLogger(__name__)


def start(config):
    client = TelegramClient(config["session_name"],
                            config["api_id"],
                            config["api_hash"])
    client.start()

    input_channels_entities = []
    output_channel_entities = []
    dialogs = client.iter_dialogs()  # Get all dialogs
    pdb.set_trace()
    for d in dialogs:
        channel_id = getattr(d.entity, 'id', None)
        print(f"Dialog: Name={d.name}, ID={channel_id},  Type={type(d.entity)}") # Debug print
        # Check if input_channel_names exists before trying to access it
        use_name = "input_channel_names" in config and d.name in config["input_channel_names"]
        use_id = "input_channel_ids" in config and channel_id in config["input_channel_ids"]

        if use_name or use_id:
            try:
                input_channels_entities.append(InputChannel(d.entity.id, d.entity.access_hash))
            except AttributeError:
                logger.warning(f"Could not get access_hash for channel: {d.name} (ID: {channel_id}). Skipping.")
                continue  # Skip the problematic channel
        if d.name in config["output_channel_names"] or (channel_id and channel_id in config["output_channel_ids"]):  # Fixed this line
            try:
                output_channel_entities.append(InputChannel(d.entity.id, d.entity.access_hash))
            except AttributeError:
                logger.warning(f"Could not get access_hash for output channel: {d.name} (ID: {channel_id}). Skipping.")
                continue  # Skip the problematic channel

    if not output_channel_entities:
        logger.error(f"Could not find any output channels in the user's dialogs")
        sys.exit(1)

    if not input_channels_entities:
        logger.error(f"Could not find any input channels in the user's dialogs")
        sys.exit(1)

    logging.info(f"Listening on {len(input_channels_entities)} channels. Forwarding messages to {len(output_channel_entities)} channels.")

    @client.on(events.NewMessage(chats=input_channels_entities))
    async def handler(event):
        for output_channel in output_channel_entities:
            await client.forward_messages(output_channel, event.message)

    client.run_until_disconnected()


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} {{CONFIG_PATH}}")
        sys.exit(1)
    with open(sys.argv[1], 'rb') as f:
        config = yaml.safe_load(f)
    start(config)
    
